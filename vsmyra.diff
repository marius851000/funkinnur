diff --git a/sourcemyra/LoadReplayState.hx b/sourcemyra/LoadReplayState.hx
index 1be8679..eeeb103 100644
--- a/sourcemyra/LoadReplayState.hx
+++ b/sourcemyra/LoadReplayState.hx
@@ -33,7 +33,7 @@ class LoadReplayState extends MusicBeatState
 	{
 		var menuBG:FlxSprite = new FlxSprite().loadGraphic(Paths.image('menuDesat'));
         #if sys
-		controlsStrings = sys.FileSystem.readDirectory(Sys.getCwd() + "/assets/replays/");
+		controlsStrings = sys.FileSystem.readDirectory(lime.system.System.applicationStorageDirectory + "/assets/replays/");
         #end
 		trace(controlsStrings);
 
diff --git a/sourcemyra/PauseSubState.hx b/sourcemyra/PauseSubState.hx
index 5e73f4b..6f93527 100644
--- a/sourcemyra/PauseSubState.hx
+++ b/sourcemyra/PauseSubState.hx
@@ -104,6 +104,8 @@ class PauseSubState extends MusicBeatSubstate
 		var accepted = controls.ACCEPT;
 		var oldOffset:Float = 0;
 		var songPath = 'assets/data/' + PlayState.SONG.song.toLowerCase() + '/';
+		var songPathOffset = lime.system.System.applicationStorageDirectory + 'assets/data/' + PlayState.SONG.song.toLowerCase() + '/';
+		sys.FileSystem.createDirectory(songPathOffset);
 
 		if (upP)
 		{
@@ -119,7 +121,7 @@ class PauseSubState extends MusicBeatSubstate
 			{
 				oldOffset = PlayState.songOffset;
 				PlayState.songOffset -= 1;
-				sys.FileSystem.rename(songPath + oldOffset + '.offset', songPath + PlayState.songOffset + '.offset');
+				sys.FileSystem.rename(songPathOffset + oldOffset + '.offset', songPathOffset + PlayState.songOffset + '.offset');
 				perSongOffset.text = "Additive Offset (Left, Right): " + PlayState.songOffset + " - Description - " + 'Adds value to global offset, per song.';
 
 				// Prevent loop from happening every single time the offset changes
@@ -146,7 +148,7 @@ class PauseSubState extends MusicBeatSubstate
 			{
 				oldOffset = PlayState.songOffset;
 				PlayState.songOffset += 1;
-				sys.FileSystem.rename(songPath + oldOffset + '.offset', songPath + PlayState.songOffset + '.offset');
+				sys.FileSystem.rename(songPathOffset + oldOffset + '.offset', songPathOffset + PlayState.songOffset + '.offset');
 				perSongOffset.text = "Additive Offset (Left, Right): " + PlayState.songOffset + " - Description - " + 'Adds value to global offset, per song.';
 				if(!offsetChanged)
 				{
diff --git a/sourcemyra/PlayState.hx b/sourcemyra/PlayState.hx
index e4da144..57fa82b 100644
--- a/sourcemyra/PlayState.hx
+++ b/sourcemyra/PlayState.hx
@@ -1836,9 +1836,11 @@ class PlayState extends MusicBeatState
 		// Per song offset check
 		#if cpp
 			var songPath = 'assets/data/' + PlayState.SONG.song.toLowerCase() + '/';
-			for(file in sys.FileSystem.readDirectory(songPath))
+			var songPathOffset = lime.system.System.applicationStorageDirectory + 'assets/data/' + PlayState.SONG.song.toLowerCase() + '/';
+			sys.FileSystem.createDirectory(songPathOffset);
+			for(file in sys.FileSystem.readDirectory(songPathOffset))
 			{
-				var path = haxe.io.Path.join([songPath, file]);
+				var path = haxe.io.Path.join([songPathOffset, file]);
 				if(!sys.FileSystem.isDirectory(path))
 				{
 					if(path.endsWith('.offset'))
@@ -1847,8 +1849,8 @@ class PlayState extends MusicBeatState
 						songOffset = Std.parseFloat(file.substring(0, file.indexOf('.off')));
 						break;
 					}else {
-						trace('Offset file not found. Creating one @: ' + songPath);
-						sys.io.File.saveContent(songPath + songOffset + '.offset', '');
+						trace('Offset file not found. Creating one @: ' + songPathOffset);
+						sys.io.File.saveContent(songPathOffset + songOffset + '.offset', '');
 					}
 				}
 			}
diff --git a/sourcemyra/Replay.hx b/sourcemyra/Replay.hx
index 3bf37a0..933534c 100644
--- a/sourcemyra/Replay.hx
+++ b/sourcemyra/Replay.hx
@@ -77,7 +77,7 @@ class Replay
         var data:String = Json.stringify(json);
 
         #if sys
-        File.saveContent("assets/replays/replay-" + PlayState.SONG.song + "-time" + Date.now().getTime() + ".kadeReplay", data);
+        File.saveContent(lime.system.System.applicationStorageDirectory + "assets/replays/replay-" + PlayState.SONG.song + "-time" + Date.now().getTime() + ".kadeReplay", data);
         #end
     }
 
@@ -85,10 +85,10 @@ class Replay
     public function LoadFromJSON()
     {
         #if sys
-        trace('loading ' + Sys.getCwd() + 'assets/replays/' + path + ' replay...');
+        trace('loading ' + lime.system.System.applicationStorageDirectory + 'assets/replays/' + path + ' replay...');
         try
         {
-            var repl:ReplayJSON = cast Json.parse(File.getContent(Sys.getCwd() + "assets/replays/" + path));
+            var repl:ReplayJSON = cast Json.parse(File.getContent(lime.system.System.applicationStorageDirectory + "assets/replays/" + path));
             replay = repl;
         }
         catch(e)
diff --git a/sourcemyra/TitleState.hx b/sourcemyra/TitleState.hx
index e275d28..22bd26e 100644
--- a/sourcemyra/TitleState.hx
+++ b/sourcemyra/TitleState.hx
@@ -55,8 +55,8 @@ class TitleState extends MusicBeatState
 		#end
 		
 		#if sys
-		if (!sys.FileSystem.exists(Sys.getCwd() + "/assets/replays"))
-			sys.FileSystem.createDirectory(Sys.getCwd() + "/assets/replays");
+		if (!sys.FileSystem.exists(lime.system.System.applicationStorageDirectory + "/assets/replays"))
+			sys.FileSystem.createDirectory(lime.system.System.applicationStorageDirectory + "/assets/replays");
 		#end
 
 		@:privateAccess
